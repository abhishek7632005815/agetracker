/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);
precacheAndRoute([
  {"url": "manifest.json", revision: '1'},
  {"url": "favicon.ico", revision: '1'},
  {"url": "favicon-16x16.png", revision: '1'},
  {"url": "favicon-32x32.png", revision: '1'},
  {"url": "favicon-96x96.png", revision: '1'},
  {"url": "apple-icon.png", revision: '1'},
  {"url": "apple-icon-precomposed.png", revision: '1'},
  {"url": "apple-icon-57x57.png", revision: '1'},
  {"url": "apple-icon-60x60.png", revision: '1'},
  {"url": "apple-icon-72x72.png", revision: '1'},
  {"url": "apple-icon-76x76.png", revision: '1'},
  {"url": "apple-icon-114x114.png", revision: '1'},
  {"url": "apple-icon-120x120.png", revision: '1'},
  {"url": "apple-icon-144x144.png", revision: '1'},
  {"url": "apple-icon-152x152.png", revision: '1'},
  {"url": "apple-icon-180x180.png", revision: '1'},
  {"url": "android-icon-36x36.png", revision: '1'},
  {"url": "android-icon-48x48.png", revision: '1'},
  {"url": "android-icon-72x72.png", revision: '1'},
  {"url": "android-icon-96x96.png", revision: '1'},
  {"url": "android-icon-144x144.png", revision: '1'},
  {"url": "android-chrome-192x192.png", revision: '1'},
  {"url": "ms-icon-70x70.png", revision: '1'},
  {"url": "ms-icon-144x144.png", revision: '1'},
  {"url": "ms-icon-150x150.png", revision: '1'},
  {"url": "ms-icon-310x310.png", revision: '1'},
  {"url": "screenshot.jpeg", revision: '1'},
  {"url": "banner.jpeg", revision: '1'},
  {"url": "service-worker.js", revision: '1'},
])

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && /\.(?:png|jpg|jpeg|gif|webp)$/.test(url.pathname), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.